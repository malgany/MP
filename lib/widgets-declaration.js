module.exports = "// AUTO-GENERATED - DO NOT CHANGE MANUALLY\n// To regenerate run:\n// pnpm --filter @oai/platform run autogen\n\n/* eslint-disable */\n// @ts-nocheck\ndeclare namespace JSX {\n  type Element = Widgets.WidgetElement\n  interface IntrinsicAttributes {\n    key?: string | number | bigint | null\n  }\n  interface IntrinsicElements {}\n  interface ElementChildrenAttribute {\n    children: Widgets.WidgetNode\n  }\n}\n\ntype SizeValue = number | string\ntype RadiusSize =\n  | \"2xs\"\n  | \"xs\"\n  | \"sm\"\n  | \"md\"\n  | \"lg\"\n  | \"xl\"\n  | \"2xl\"\n  | \"3xl\"\n  | \"4xl\"\n  | \"full\"\n  | \"100%\"\n  | \"none\"\ntype ColorValue =\n  | string\n  | {\n      dark: string\n      light: string\n    }\ntype BorderSetting =\n  | number\n  | {\n      size: number\n      color?: ColorValue\n      style?: \"solid\" | \"dashed\" | \"dotted\" | \"double\" | \"groove\" | \"ridge\" | \"inset\" | \"outset\"\n    }\ntype Series = BarSeries | AreaSeries | LineSeries\ntype BarSeries = {\n  label?: string\n  dataKey: string\n  type: \"bar\"\n  color?: SeriesColor | \\`var(--\\${string})\\` | \\`#\\${string}\\`\n  stack?: string\n}\ntype CurveType =\n  | \"basis\"\n  | \"basisClosed\"\n  | \"basisOpen\"\n  | \"bumpX\"\n  | \"bumpY\"\n  | \"bump\"\n  | \"linear\"\n  | \"linearClosed\"\n  | \"natural\"\n  | \"monotoneX\"\n  | \"monotoneY\"\n  | \"monotone\"\n  | \"step\"\n  | \"stepBefore\"\n  | \"stepAfter\"\ntype AreaSeries = {\n  label?: string\n  dataKey: string\n  color?: ColorValue\n  type: \"area\"\n  curveType?: CurveType\n  stack?: string\n}\ntype LineSeries = {\n  label?: string\n  color?: ColorValue\n  dataKey: string\n  type: \"line\"\n  curveType?: CurveType\n}\ntype SeriesColor = (typeof COLOR_ORDER)[number]\ntype EditableProps = {\n  name: string\n  autoComplete?: string\n  autoFocus?: boolean\n  autoSelect?: boolean\n  allowAutofillExtensions?: boolean\n  required?: boolean\n  placeholder?: string\n  pattern?: string\n}\n\ndeclare namespace Widgets {\n  type WidgetElement =\n    | Basic\n    | Card\n    | ListView\n    | ListViewItem\n    | Badge\n    | Box\n    | Col\n    | Row\n    | Button\n    | Caption\n    | Chart\n    | Checkbox\n    | DatePicker\n    | Divider\n    | Form\n    | Icon\n    | IFrame\n    | Image\n    | Input\n    | Label\n    | Markdown\n    | RadioGroup\n    | Select\n    | Spacer\n    | Text\n    | Textarea\n    | Title\n    | Transition\n\n  type WidgetNode = false | null | WidgetElement | WidgetNode[]\n\n  const Basic: (props: {\n    children?: WidgetNode\n    status?: undefined\n    theme?: \"light\" | \"dark\"\n    direction?: \"row\" | \"col\"\n    gap?: string | number\n    padding?:\n      | string\n      | number\n      | {\n          top?: SizeValue\n          right?: SizeValue\n          bottom?: SizeValue\n          left?: SizeValue\n          x?: SizeValue\n          y?: SizeValue\n        }\n    align?: \"start\" | \"center\" | \"end\" | \"baseline\" | \"stretch\"\n    justify?: \"start\" | \"center\" | \"end\" | \"stretch\" | \"between\" | \"around\" | \"evenly\"\n  }) => WidgetElement\n  type Basic = typeof Basic\n\n  const Card: (props: {\n    size?: \"sm\" | \"md\" | \"lg\" | \"full\"\n    padding?:\n      | string\n      | number\n      | {\n          top?: SizeValue\n          right?: SizeValue\n          bottom?: SizeValue\n          left?: SizeValue\n          x?: SizeValue\n          y?: SizeValue\n        }\n    asForm?: false | true\n    status?: { text: string; favicon?: string; frame?: boolean } | { text: string; icon: string }\n    confirm?: {\n      action: {\n        type: string\n        payload?: Record<string, unknown>\n        handler?: \"server\" | \"client\"\n        loadingBehavior?: \"auto\" | \"none\" | \"self\" | \"container\"\n      }\n      label: string\n    }\n    cancel?: {\n      action: {\n        type: string\n        payload?: Record<string, unknown>\n        handler?: \"server\" | \"client\"\n        loadingBehavior?: \"auto\" | \"none\" | \"self\" | \"container\"\n      }\n      label: string\n    }\n    background?: string | { dark: string; light: string }\n    collapsed?: false | true\n    children?: WidgetNode\n    theme?: \"light\" | \"dark\"\n  }) => WidgetElement\n  type Card = typeof Card\n\n  const ListView: (props: {\n    children?: WidgetNode\n    limit?: number | \"auto\"\n    status?: { text: string; favicon?: string; frame?: boolean } | { text: string; icon: string }\n    theme?: \"light\" | \"dark\"\n  }) => WidgetElement\n  type ListView = typeof ListView\n\n  const ListViewItem: (props: {\n    children?: WidgetNode\n    onClickAction?: {\n      type: string\n      payload?: Record<string, unknown>\n      handler?: \"server\" | \"client\"\n      loadingBehavior?: \"auto\" | \"none\" | \"self\" | \"container\"\n    }\n    gap?: string | number\n    align?: \"start\" | \"center\" | \"end\" | \"baseline\" | \"stretch\"\n  }) => WidgetElement\n  type ListViewItem = typeof ListViewItem\n\n  const Badge: (props: {\n    label?: string\n    color?: \"info\" | \"secondary\" | \"success\" | \"danger\" | \"warning\" | \"discovery\"\n    variant?: \"solid\" | \"soft\" | \"outline\"\n    pill?: false | true\n    size?: \"sm\" | \"md\" | \"lg\"\n  }) => WidgetElement\n  type Badge = typeof Badge\n\n  const Box: (props: {\n    children?: WidgetNode\n    direction?: \"row\" | \"col\"\n    align?: \"start\" | \"center\" | \"end\" | \"baseline\" | \"stretch\"\n    justify?: \"start\" | \"center\" | \"end\" | \"stretch\" | \"between\" | \"around\" | \"evenly\"\n    wrap?: \"wrap\" | \"nowrap\" | \"wrap-reverse\"\n    flex?: string | number\n    height?: string | number\n    width?: string | number\n    minHeight?: string | number\n    minWidth?: string | number\n    maxHeight?: string | number\n    maxWidth?: string | number\n    size?: string | number\n    minSize?: string | number\n    maxSize?: string | number\n    gap?: string | number\n    padding?:\n      | string\n      | number\n      | {\n          top?: SizeValue\n          right?: SizeValue\n          bottom?: SizeValue\n          left?: SizeValue\n          x?: SizeValue\n          y?: SizeValue\n        }\n    border?:\n      | number\n      | {\n          size: number\n          color?: ColorValue\n          style?: \"solid\" | \"dashed\" | \"dotted\" | \"double\" | \"groove\" | \"ridge\" | \"inset\" | \"outset\"\n        }\n      | {\n          top?: BorderSetting\n          right?: BorderSetting\n          bottom?: BorderSetting\n          left?: BorderSetting\n          x?: BorderSetting\n          y?: BorderSetting\n        }\n    radius?:\n      | \"sm\"\n      | \"md\"\n      | \"lg\"\n      | \"full\"\n      | \"none\"\n      | \"2xs\"\n      | \"xs\"\n      | \"xl\"\n      | \"2xl\"\n      | \"3xl\"\n      | \"4xl\"\n      | \"100%\"\n      | {\n          topLeft?: RadiusSize\n          topRight?: RadiusSize\n          bottomRight?: RadiusSize\n          bottomLeft?: RadiusSize\n        }\n    background?: string | { dark: string; light: string }\n    aspectRatio?: string | number\n    flush?: false | true\n    scrollable?: false | true\n  }) => WidgetElement\n  type Box = typeof Box\n\n  const Col: (props: {\n    gap?: string | number\n    padding?:\n      | string\n      | number\n      | {\n          top?: SizeValue\n          right?: SizeValue\n          bottom?: SizeValue\n          left?: SizeValue\n          x?: SizeValue\n          y?: SizeValue\n        }\n    align?: \"start\" | \"center\" | \"end\" | \"baseline\" | \"stretch\"\n    justify?: \"start\" | \"center\" | \"end\" | \"stretch\" | \"between\" | \"around\" | \"evenly\"\n    children?: WidgetNode\n    wrap?: \"wrap\" | \"nowrap\" | \"wrap-reverse\"\n    flex?: string | number\n    height?: string | number\n    width?: string | number\n    minHeight?: string | number\n    minWidth?: string | number\n    maxHeight?: string | number\n    maxWidth?: string | number\n    size?: string | number\n    minSize?: string | number\n    maxSize?: string | number\n    border?:\n      | number\n      | {\n          size: number\n          color?: ColorValue\n          style?: \"solid\" | \"dashed\" | \"dotted\" | \"double\" | \"groove\" | \"ridge\" | \"inset\" | \"outset\"\n        }\n      | {\n          top?: BorderSetting\n          right?: BorderSetting\n          bottom?: BorderSetting\n          left?: BorderSetting\n          x?: BorderSetting\n          y?: BorderSetting\n        }\n    radius?:\n      | \"sm\"\n      | \"md\"\n      | \"lg\"\n      | \"full\"\n      | \"none\"\n      | \"2xs\"\n      | \"xs\"\n      | \"xl\"\n      | \"2xl\"\n      | \"3xl\"\n      | \"4xl\"\n      | \"100%\"\n      | {\n          topLeft?: RadiusSize\n          topRight?: RadiusSize\n          bottomRight?: RadiusSize\n          bottomLeft?: RadiusSize\n        }\n    background?: string | { dark: string; light: string }\n    aspectRatio?: string | number\n    flush?: false | true\n    scrollable?: false | true\n  }) => WidgetElement\n  type Col = typeof Col\n\n  const Row: (props: {\n    gap?: string | number\n    padding?:\n      | string\n      | number\n      | {\n          top?: SizeValue\n          right?: SizeValue\n          bottom?: SizeValue\n          left?: SizeValue\n          x?: SizeValue\n          y?: SizeValue\n        }\n    align?: \"start\" | \"center\" | \"end\" | \"baseline\" | \"stretch\"\n    justify?: \"start\" | \"center\" | \"end\" | \"stretch\" | \"between\" | \"around\" | \"evenly\"\n    children?: WidgetNode\n    wrap?: \"wrap\" | \"nowrap\" | \"wrap-reverse\"\n    flex?: string | number\n    height?: string | number\n    width?: string | number\n    minHeight?: string | number\n    minWidth?: string | number\n    maxHeight?: string | number\n    maxWidth?: string | number\n    size?: string | number\n    minSize?: string | number\n    maxSize?: string | number\n    border?:\n      | number\n      | {\n          size: number\n          color?: ColorValue\n          style?: \"solid\" | \"dashed\" | \"dotted\" | \"double\" | \"groove\" | \"ridge\" | \"inset\" | \"outset\"\n        }\n      | {\n          top?: BorderSetting\n          right?: BorderSetting\n          bottom?: BorderSetting\n          left?: BorderSetting\n          x?: BorderSetting\n          y?: BorderSetting\n        }\n    radius?:\n      | \"sm\"\n      | \"md\"\n      | \"lg\"\n      | \"full\"\n      | \"none\"\n      | \"2xs\"\n      | \"xs\"\n      | \"xl\"\n      | \"2xl\"\n      | \"3xl\"\n      | \"4xl\"\n      | \"100%\"\n      | {\n          topLeft?: RadiusSize\n          topRight?: RadiusSize\n          bottomRight?: RadiusSize\n          bottomLeft?: RadiusSize\n        }\n    background?: string | { dark: string; light: string }\n    aspectRatio?: string | number\n    flush?: false | true\n    scrollable?: false | true\n  }) => WidgetElement\n  type Row = typeof Row\n\n  const Button: (props: {\n    style?: \"secondary\" | \"primary\"\n    label?: string\n    submit?: false | true\n    onClickAction?: {\n      type: string\n      payload?: Record<string, unknown>\n      handler?: \"server\" | \"client\"\n      loadingBehavior?: \"auto\" | \"none\" | \"self\" | \"container\"\n    }\n    iconStart?: string\n    iconEnd?: string\n    color?:\n      | \"info\"\n      | \"secondary\"\n      | \"success\"\n      | \"danger\"\n      | \"warning\"\n      | \"discovery\"\n      | \"primary\"\n      | \"caution\"\n    variant?: \"solid\" | \"soft\" | \"outline\" | \"ghost\"\n    size?: \"sm\" | \"md\" | \"lg\" | \"2xs\" | \"xs\" | \"xl\" | \"2xl\" | \"3xl\" | \"3xs\"\n    pill?: false | true\n    block?: false | true\n    uniform?: false | true\n    disabled?: false | true\n    iconSize?: \"sm\" | \"md\" | \"lg\" | \"xl\" | \"2xl\"\n    children?: undefined\n  }) => WidgetElement\n  type Button = typeof Button\n\n  const Caption: (props: {\n    value: string\n    size?: \"sm\" | \"md\" | \"lg\"\n    weight?: \"normal\" | \"medium\" | \"semibold\" | \"bold\"\n    textAlign?: \"start\" | \"center\" | \"end\"\n    color?: string | { dark: string; light: string }\n    truncate?: false | true\n    maxLines?: number\n  }) => WidgetElement\n  type Caption = typeof Caption\n\n  const Chart: (props: {\n    data: Record<string, string | number>[]\n    series: Series[]\n    xAxis?: string | { dataKey: string; hide?: boolean; labels?: Record<string | number, string> }\n    showYAxis?: false | true\n    showLegend?: false | true\n    showTooltip?: false | true\n    barGap?: number\n    barCategoryGap?: number\n    children?: undefined\n    flex?: string | number\n    height?: string | number\n    width?: string | number\n    minHeight?: string | number\n    minWidth?: string | number\n    maxHeight?: string | number\n    maxWidth?: string | number\n    size?: string | number\n    minSize?: string | number\n    maxSize?: string | number\n    aspectRatio?: string | number\n  }) => WidgetElement\n  type Chart = typeof Chart\n\n  const Checkbox: (props: {\n    onChangeAction?: {\n      type: string\n      payload?: Record<string, unknown>\n      handler?: \"server\" | \"client\"\n      loadingBehavior?: \"auto\" | \"none\" | \"self\" | \"container\"\n    }\n    label?: string\n    name: string\n    defaultChecked?: string\n    disabled?: false | true\n    required?: false | true\n  }) => WidgetElement\n  type Checkbox = typeof Checkbox\n\n  const DatePicker: (props: {\n    onChangeAction?: {\n      type: string\n      payload?: Record<string, unknown>\n      handler?: \"server\" | \"client\"\n      loadingBehavior?: \"auto\" | \"none\" | \"self\" | \"container\"\n    }\n    name: string\n    min?: string\n    max?: string\n    side?: \"top\" | \"bottom\" | \"left\" | \"right\"\n    align?: \"start\" | \"center\" | \"end\"\n    placeholder?: string\n    defaultValue?: string\n    variant?: \"soft\" | \"outline\" | \"ghost\"\n    size?: \"sm\" | \"md\" | \"lg\" | \"2xs\" | \"xs\" | \"xl\" | \"2xl\" | \"3xl\" | \"3xs\"\n    pill?: false | true\n    block?: false | true\n    clearable?: false | true\n    disabled?: false | true\n    required?: false | true\n    children?: undefined\n  }) => WidgetElement\n  type DatePicker = typeof DatePicker\n\n  const Divider: (props: {\n    spacing?: string | number\n    color?: string | { dark: string; light: string }\n    size?: string | number\n    flush?: false | true\n  }) => WidgetElement\n  type Divider = typeof Divider\n\n  const Form: (props: {\n    children?: WidgetNode\n    direction?: \"row\" | \"col\"\n    align?: \"start\" | \"center\" | \"end\" | \"baseline\" | \"stretch\"\n    justify?: \"start\" | \"center\" | \"end\" | \"stretch\" | \"between\" | \"around\" | \"evenly\"\n    wrap?: \"wrap\" | \"nowrap\" | \"wrap-reverse\"\n    flex?: string | number\n    height?: string | number\n    width?: string | number\n    minHeight?: string | number\n    minWidth?: string | number\n    maxHeight?: string | number\n    maxWidth?: string | number\n    size?: string | number\n    minSize?: string | number\n    maxSize?: string | number\n    gap?: string | number\n    padding?:\n      | string\n      | number\n      | {\n          top?: SizeValue\n          right?: SizeValue\n          bottom?: SizeValue\n          left?: SizeValue\n          x?: SizeValue\n          y?: SizeValue\n        }\n    border?:\n      | number\n      | {\n          size: number\n          color?: ColorValue\n          style?: \"solid\" | \"dashed\" | \"dotted\" | \"double\" | \"groove\" | \"ridge\" | \"inset\" | \"outset\"\n        }\n      | {\n          top?: BorderSetting\n          right?: BorderSetting\n          bottom?: BorderSetting\n          left?: BorderSetting\n          x?: BorderSetting\n          y?: BorderSetting\n        }\n    radius?:\n      | \"sm\"\n      | \"md\"\n      | \"lg\"\n      | \"full\"\n      | \"none\"\n      | \"2xs\"\n      | \"xs\"\n      | \"xl\"\n      | \"2xl\"\n      | \"3xl\"\n      | \"4xl\"\n      | \"100%\"\n      | {\n          topLeft?: RadiusSize\n          topRight?: RadiusSize\n          bottomRight?: RadiusSize\n          bottomLeft?: RadiusSize\n        }\n    background?: string | { dark: string; light: string }\n    aspectRatio?: string | number\n    flush?: false | true\n    scrollable?: false | true\n    onSubmitAction?: {\n      type: string\n      payload?: Record<string, unknown>\n      handler?: \"server\" | \"client\"\n      loadingBehavior?: \"auto\" | \"none\" | \"self\" | \"container\"\n    }\n  }) => WidgetElement\n  type Form = typeof Form\n\n  const Icon: (props: {\n    name: string\n    color?: string | { dark: string; light: string }\n    size?: \"sm\" | \"md\" | \"lg\" | \"xs\" | \"xl\" | \"2xl\" | \"3xl\"\n  }) => WidgetElement\n  type Icon = typeof Icon\n\n  const IFrame: (props: {\n    src: string\n    height?: string | number\n    flush?: false | true\n  }) => WidgetElement\n  type IFrame = typeof IFrame\n\n  const Image: (props: {\n    size?: string | number\n    flex?: string | number\n    height?: string | number\n    width?: string | number\n    minHeight?: string | number\n    minWidth?: string | number\n    maxHeight?: string | number\n    maxWidth?: string | number\n    minSize?: string | number\n    maxSize?: string | number\n    radius?:\n      | \"sm\"\n      | \"md\"\n      | \"lg\"\n      | \"full\"\n      | \"none\"\n      | \"2xs\"\n      | \"xs\"\n      | \"xl\"\n      | \"2xl\"\n      | \"3xl\"\n      | \"4xl\"\n      | \"100%\"\n      | {\n          topLeft?: RadiusSize\n          topRight?: RadiusSize\n          bottomRight?: RadiusSize\n          bottomLeft?: RadiusSize\n        }\n    background?: string | { dark: string; light: string }\n    aspectRatio?: string | number\n    flush?: false | true\n    src: string\n    alt?: string\n    fit?: \"none\" | \"cover\" | \"contain\" | \"fill\" | \"scale-down\"\n    position?:\n      | \"center\"\n      | \"top\"\n      | \"bottom\"\n      | \"left\"\n      | \"right\"\n      | \"top left\"\n      | \"top right\"\n      | \"bottom left\"\n      | \"bottom right\"\n    frame?: false | true\n    children?: undefined\n  }) => WidgetElement\n  type Image = typeof Image\n\n  const Input: (props: {\n    name: string\n    inputType?: \"number\" | \"text\" | \"email\" | \"password\" | \"tel\" | \"url\"\n    defaultValue?: string\n    required?: false | true\n    pattern?: string\n    placeholder?: string\n    allowAutofillExtensions?: false | true\n    autoSelect?: false | true\n    autoFocus?: false | true\n    disabled?: false | true\n    variant?: \"soft\" | \"outline\"\n    size?: \"sm\" | \"md\" | \"lg\" | \"2xs\" | \"xs\" | \"xl\" | \"2xl\" | \"3xl\" | \"3xs\"\n    gutterSize?: \"sm\" | \"md\" | \"lg\" | \"2xs\" | \"xs\" | \"xl\"\n    pill?: false | true\n    children?: undefined\n  }) => WidgetElement\n  type Input = typeof Input\n\n  const Label: (props: {\n    value: string\n    fieldName: string\n    size?: \"sm\" | \"md\" | \"lg\" | \"xs\" | \"xl\"\n    weight?: \"normal\" | \"medium\" | \"semibold\" | \"bold\"\n    textAlign?: \"start\" | \"center\" | \"end\"\n    color?: string | { dark: string; light: string }\n  }) => WidgetElement\n  type Label = typeof Label\n\n  const Markdown: (props: { value: string; streaming?: false | true }) => WidgetElement\n  type Markdown = typeof Markdown\n\n  const RadioGroup: (props: {\n    options?: { label: string; value: string; disabled?: boolean }[]\n    ariaLabel?: string\n    onChangeAction?: {\n      type: string\n      payload?: Record<string, unknown>\n      handler?: \"server\" | \"client\"\n      loadingBehavior?: \"auto\" | \"none\" | \"self\" | \"container\"\n    }\n    name: string\n    defaultValue?: string\n    direction?: \"row\" | \"col\"\n    disabled?: false | true\n    required?: false | true\n  }) => WidgetElement\n  type RadioGroup = typeof RadioGroup\n\n  const Select: (props: {\n    options?: { label: string; value: string; disabled?: boolean; description?: string }[]\n    onChangeAction?: {\n      type: string\n      payload?: Record<string, unknown>\n      handler?: \"server\" | \"client\"\n      loadingBehavior?: \"auto\" | \"none\" | \"self\" | \"container\"\n    }\n    name: string\n    placeholder?: string\n    defaultValue?: string\n    variant?: \"soft\" | \"outline\" | \"ghost\"\n    size?: \"sm\" | \"md\" | \"lg\" | \"2xs\" | \"xs\" | \"xl\" | \"2xl\" | \"3xl\" | \"3xs\"\n    pill?: false | true\n    block?: false | true\n    clearable?: false | true\n    disabled?: false | true\n    required?: false | true\n  }) => WidgetElement\n  type Select = typeof Select\n\n  const Spacer: (props: { minSize?: string | number }) => WidgetElement\n  type Spacer = typeof Spacer\n\n  const Text: (props: {\n    value: string\n    color?: string | { dark: string; light: string }\n    width?: string | number\n    size?: \"sm\" | \"md\" | \"lg\" | \"xs\" | \"xl\"\n    weight?: \"normal\" | \"medium\" | \"semibold\" | \"bold\"\n    textAlign?: \"start\" | \"center\" | \"end\"\n    italic?: false | true\n    lineThrough?: false | true\n    truncate?: false | true\n    minLines?: number\n    maxLines?: number\n    streaming?: false | true\n    editable?: false | EditableProps\n    children?: undefined\n  }) => WidgetElement\n  type Text = typeof Text\n\n  const Textarea: (props: {\n    name: string\n    defaultValue?: string\n    required?: false | true\n    placeholder?: string\n    autoSelect?: false | true\n    autoFocus?: false | true\n    disabled?: false | true\n    variant?: \"soft\" | \"outline\"\n    size?: \"sm\" | \"md\" | \"lg\" | \"2xs\" | \"xs\" | \"xl\" | \"2xl\" | \"3xl\" | \"3xs\"\n    gutterSize?: \"sm\" | \"md\" | \"lg\" | \"2xs\" | \"xs\" | \"xl\"\n    rows?: number\n    autoResize?: false | true\n    maxRows?: number\n    allowAutofillExtensions?: false | true\n    children?: undefined\n  }) => WidgetElement\n  type Textarea = typeof Textarea\n\n  const Title: (props: {\n    value: string\n    size?: \"sm\" | \"md\" | \"lg\" | \"xl\" | \"2xl\" | \"3xl\" | \"4xl\" | \"5xl\"\n    weight?: \"normal\" | \"medium\" | \"semibold\" | \"bold\"\n    textAlign?: \"start\" | \"center\" | \"end\"\n    color?: string | { dark: string; light: string }\n    truncate?: false | true\n    maxLines?: number\n  }) => WidgetElement\n  type Title = typeof Title\n\n  const Transition: (props: { children?: WidgetElement }) => WidgetElement\n  type Transition = typeof Transition\n}\n\ndeclare const Basic: Widgets.Basic\ndeclare const Card: Widgets.Card\ndeclare const ListView: Widgets.ListView\ndeclare const ListViewItem: Widgets.ListViewItem\ndeclare const Badge: Widgets.Badge\ndeclare const Box: Widgets.Box\ndeclare const Col: Widgets.Col\ndeclare const Row: Widgets.Row\ndeclare const Button: Widgets.Button\ndeclare const Caption: Widgets.Caption\ndeclare const Chart: Widgets.Chart\ndeclare const Checkbox: Widgets.Checkbox\ndeclare const DatePicker: Widgets.DatePicker\ndeclare const Divider: Widgets.Divider\ndeclare const Form: Widgets.Form\ndeclare const Icon: Widgets.Icon\ndeclare const IFrame: Widgets.IFrame\ndeclare const Image: Widgets.Image\ndeclare const Input: Widgets.Input\ndeclare const Label: Widgets.Label\ndeclare const Markdown: Widgets.Markdown\ndeclare const RadioGroup: Widgets.RadioGroup\ndeclare const Select: Widgets.Select\ndeclare const Spacer: Widgets.Spacer\ndeclare const Text: Widgets.Text\ndeclare const Textarea: Widgets.Textarea\ndeclare const Title: Widgets.Title\ndeclare const Transition: Widgets.Transition\n`;function s3t(t){throw new Error('Could not dynamically require \"'+t+'\". Please configure the dynamicRequireTargets or/and ignoreDynamicRequires option of @rollup/plugin-commonjs appropriately for this require call to work.')}var bje={exports:{}}";
